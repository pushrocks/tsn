"use strict";
// import all the stuff we need
var plugins = require("./tsn.plugins");
var compiler = function (fileNames, options) {
    var program = plugins.ts.createProgram(fileNames, options);
    var emitResult = program.emit();
    var allDiagnostics = plugins.ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
    allDiagnostics.forEach(function (diagnostic) {
        var _a = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start), line = _a.line, character = _a.character;
        var message = plugins.ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
        console.log(diagnostic.file.fileName + " (" + (line + 1) + "," + (character + 1) + "): " + message);
    });
    var exitCode = emitResult.emitSkipped ? 1 : 0;
    if (exitCode == 0) {
        plugins.beautylog.ok("TypeScript emit succeeded!");
    }
    else {
        plugins.beautylog.error("TypeScript emit failed. Please investigate!");
        process.exit(exitCode);
    }
};
var compilerOptions = {
    declaration: true,
    inlineSourceMap: true,
    noEmitOnError: true,
    noImplicitAny: true,
    target: plugins.ts.ScriptTarget.ES5,
    module: plugins.ts.ModuleKind.CommonJS
};
exports.compile = function (filesArg, outDirArg) {
    var assignedOptions = {};
    assignedOptions = plugins.lodash.assign(assignedOptions, compiler, { outDir: outDirArg });
    plugins.beautylog.info("checking files before compilation");
    compiler(filesArg, assignedOptions);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBK0I7QUFDL0IsSUFBWSxPQUFPLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFFekMsSUFBSSxRQUFRLEdBQUcsVUFBQyxTQUFtQixFQUFFLE9BQW1DO0lBQ3BFLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFaEMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRTlGLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQyxVQUFVO1FBQzlCLElBQUEsb0VBQXlGLEVBQW5GLGNBQUksRUFBRSx3QkFBUyxDQUFxRTtRQUMxRixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEYsT0FBTyxDQUFDLEdBQUcsQ0FBSSxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsV0FBSyxJQUFJLEdBQUcsQ0FBQyxXQUFJLFNBQVMsR0FBRyxDQUFDLFlBQU0sT0FBUyxDQUFDLENBQUM7SUFDMUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFBLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7UUFDZCxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDdkUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQixDQUFDO0FBQ0wsQ0FBQyxDQUFBO0FBRUQsSUFBSSxlQUFlLEdBQThCO0lBQzdDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLGFBQWEsRUFBRSxJQUFJO0lBQ25CLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHO0lBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRO0NBQ3pDLENBQUM7QUFFUyxlQUFPLEdBQUcsVUFBQyxRQUFpQixFQUFDLFNBQWdCO0lBQ3BELElBQUksZUFBZSxHQUE4QixFQUFFLENBQUM7SUFDcEQsZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBQyxRQUFRLEVBQUMsRUFBQyxNQUFNLEVBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztJQUVyRixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBRTVELFFBQVEsQ0FBQyxRQUFRLEVBQUMsZUFBZSxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IGFsbCB0aGUgc3R1ZmYgd2UgbmVlZFxuaW1wb3J0ICogYXMgcGx1Z2lucyBmcm9tIFwiLi90c24ucGx1Z2luc1wiO1xuXG5sZXQgY29tcGlsZXIgPSAoZmlsZU5hbWVzOiBzdHJpbmdbXSwgb3B0aW9uczogcGx1Z2lucy50cy5Db21waWxlck9wdGlvbnMpOiB2b2lkID0+IHtcbiAgICBsZXQgcHJvZ3JhbSA9IHBsdWdpbnMudHMuY3JlYXRlUHJvZ3JhbShmaWxlTmFtZXMsIG9wdGlvbnMpO1xuICAgIGxldCBlbWl0UmVzdWx0ID0gcHJvZ3JhbS5lbWl0KCk7XG5cbiAgICBsZXQgYWxsRGlhZ25vc3RpY3MgPSBwbHVnaW5zLnRzLmdldFByZUVtaXREaWFnbm9zdGljcyhwcm9ncmFtKS5jb25jYXQoZW1pdFJlc3VsdC5kaWFnbm9zdGljcyk7XG5cbiAgICBhbGxEaWFnbm9zdGljcy5mb3JFYWNoKChkaWFnbm9zdGljKSA9PiB7XG4gICAgICAgIGxldCB7IGxpbmUsIGNoYXJhY3RlciB9ID0gZGlhZ25vc3RpYy5maWxlLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKGRpYWdub3N0aWMuc3RhcnQpO1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHBsdWdpbnMudHMuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dChkaWFnbm9zdGljLm1lc3NhZ2VUZXh0LCAnXFxuJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2RpYWdub3N0aWMuZmlsZS5maWxlTmFtZX0gKCR7bGluZSArIDF9LCR7Y2hhcmFjdGVyICsgMX0pOiAke21lc3NhZ2V9YCk7XG4gICAgfSk7XG5cbiAgICBsZXQgZXhpdENvZGUgPSBlbWl0UmVzdWx0LmVtaXRTa2lwcGVkID8gMSA6IDA7XG4gICAgaWYoZXhpdENvZGUgPT0gMCl7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLm9rKFwiVHlwZVNjcmlwdCBlbWl0IHN1Y2NlZWRlZCFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cuZXJyb3IoXCJUeXBlU2NyaXB0IGVtaXQgZmFpbGVkLiBQbGVhc2UgaW52ZXN0aWdhdGUhXCIpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoZXhpdENvZGUpO1xuICAgIH1cbn1cblxubGV0IGNvbXBpbGVyT3B0aW9uczpwbHVnaW5zLnRzLkNvbXBpbGVyT3B0aW9ucyA9IHtcbiAgICBkZWNsYXJhdGlvbjogdHJ1ZSxcbiAgICBpbmxpbmVTb3VyY2VNYXA6IHRydWUsXG4gICAgbm9FbWl0T25FcnJvcjogdHJ1ZSxcbiAgICBub0ltcGxpY2l0QW55OiB0cnVlLFxuICAgIHRhcmdldDogcGx1Z2lucy50cy5TY3JpcHRUYXJnZXQuRVM1LFxuICAgIG1vZHVsZTogcGx1Z2lucy50cy5Nb2R1bGVLaW5kLkNvbW1vbkpTXG59O1xuXG5leHBvcnQgbGV0IGNvbXBpbGUgPSAoZmlsZXNBcmc6c3RyaW5nW10sb3V0RGlyQXJnOnN0cmluZykgPT4ge1xuICAgIGxldCBhc3NpZ25lZE9wdGlvbnM6cGx1Z2lucy50cy5Db21waWxlck9wdGlvbnMgPSB7fTtcbiAgICBhc3NpZ25lZE9wdGlvbnMgPSBwbHVnaW5zLmxvZGFzaC5hc3NpZ24oYXNzaWduZWRPcHRpb25zLGNvbXBpbGVyLHtvdXREaXI6b3V0RGlyQXJnfSk7XG5cbiAgICBwbHVnaW5zLmJlYXV0eWxvZy5pbmZvKFwiY2hlY2tpbmcgZmlsZXMgYmVmb3JlIGNvbXBpbGF0aW9uXCIpO1xuXG4gICAgY29tcGlsZXIoZmlsZXNBcmcsYXNzaWduZWRPcHRpb25zKTtcbn0iXX0=
