"use strict";
var plugins = require("./tsn.plugins");
plugins.shelljs.exec("cd test & tsc index.ts");
exports.transpile = function (fromArg, toArg) {
};
var compiler = function (fileNames, options) {
    var program = plugins.ts.createProgram(fileNames, options);
    var emitResult = program.emit();
    var allDiagnostics = plugins.ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
    allDiagnostics.forEach(function (diagnostic) {
        var _a = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start), line = _a.line, character = _a.character;
        var message = plugins.ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
        console.log(diagnostic.file.fileName + " (" + (line + 1) + "," + (character + 1) + "): " + message);
    });
    var exitCode = emitResult.emitSkipped ? 1 : 0;
    console.log("Process exiting with code '" + exitCode + "'.");
    process.exit(exitCode);
};
var compileOptions = {
    inlineSourceMap: true,
    noEmitOnError: true,
    noImplicitAny: true,
    target: plugins.ts.ScriptTarget.ES5,
    module: plugins.ts.ModuleKind.CommonJS
};
exports.compile = function (filesArg) {
    compiler(filesArg, compileOptions);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFZLE9BQU8sV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUV6QyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXBDLGlCQUFTLEdBQUcsVUFBQyxPQUFjLEVBQUMsS0FBWTtBQUNuRCxDQUFDLENBQUM7QUFFRixJQUFJLFFBQVEsR0FBRyxVQUFDLFNBQW1CLEVBQUUsT0FBbUM7SUFDcEUsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVoQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFOUYsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFBLFVBQVU7UUFDN0IsSUFBQSxvRUFBeUYsRUFBbkYsY0FBSSxFQUFFLHdCQUFTLENBQXFFO1FBQzFGLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsNEJBQTRCLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRixPQUFPLENBQUMsR0FBRyxDQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxXQUFLLElBQUksR0FBRyxDQUFDLFdBQUksU0FBUyxHQUFHLENBQUMsWUFBTSxPQUFTLENBQUMsQ0FBQztJQUMxRixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUE4QixRQUFRLE9BQUksQ0FBQyxDQUFDO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFBO0FBRUQsSUFBSSxjQUFjLEdBQThCO0lBQzVDLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLGFBQWEsRUFBRSxJQUFJO0lBQ25CLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHO0lBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRO0NBQ3pDLENBQUE7QUFFVSxlQUFPLEdBQUcsVUFBQyxRQUFpQjtJQUNuQyxRQUFRLENBQUMsUUFBUSxFQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBsdWdpbnMgZnJvbSBcIi4vdHNuLnBsdWdpbnNcIjtcblxucGx1Z2lucy5zaGVsbGpzLmV4ZWMoXCJjZCB0ZXN0ICYgdHNjIGluZGV4LnRzXCIpO1xuXG5leHBvcnQgbGV0IHRyYW5zcGlsZSA9IChmcm9tQXJnOnN0cmluZyx0b0FyZzpzdHJpbmcpID0+IHtcbn07XG5cbmxldCBjb21waWxlciA9IChmaWxlTmFtZXM6IHN0cmluZ1tdLCBvcHRpb25zOiBwbHVnaW5zLnRzLkNvbXBpbGVyT3B0aW9ucyk6IHZvaWQgPT4ge1xuICAgIGxldCBwcm9ncmFtID0gcGx1Z2lucy50cy5jcmVhdGVQcm9ncmFtKGZpbGVOYW1lcywgb3B0aW9ucyk7XG4gICAgbGV0IGVtaXRSZXN1bHQgPSBwcm9ncmFtLmVtaXQoKTtcblxuICAgIGxldCBhbGxEaWFnbm9zdGljcyA9IHBsdWdpbnMudHMuZ2V0UHJlRW1pdERpYWdub3N0aWNzKHByb2dyYW0pLmNvbmNhdChlbWl0UmVzdWx0LmRpYWdub3N0aWNzKTtcblxuICAgIGFsbERpYWdub3N0aWNzLmZvckVhY2goZGlhZ25vc3RpYyA9PiB7XG4gICAgICAgIGxldCB7IGxpbmUsIGNoYXJhY3RlciB9ID0gZGlhZ25vc3RpYy5maWxlLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKGRpYWdub3N0aWMuc3RhcnQpO1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHBsdWdpbnMudHMuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dChkaWFnbm9zdGljLm1lc3NhZ2VUZXh0LCAnXFxuJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2RpYWdub3N0aWMuZmlsZS5maWxlTmFtZX0gKCR7bGluZSArIDF9LCR7Y2hhcmFjdGVyICsgMX0pOiAke21lc3NhZ2V9YCk7XG4gICAgfSk7XG5cbiAgICBsZXQgZXhpdENvZGUgPSBlbWl0UmVzdWx0LmVtaXRTa2lwcGVkID8gMSA6IDA7XG4gICAgY29uc29sZS5sb2coYFByb2Nlc3MgZXhpdGluZyB3aXRoIGNvZGUgJyR7ZXhpdENvZGV9Jy5gKTtcbiAgICBwcm9jZXNzLmV4aXQoZXhpdENvZGUpO1xufVxuXG5sZXQgY29tcGlsZU9wdGlvbnM6cGx1Z2lucy50cy5Db21waWxlck9wdGlvbnMgPSB7XG4gICAgaW5saW5lU291cmNlTWFwOiB0cnVlLFxuICAgIG5vRW1pdE9uRXJyb3I6IHRydWUsXG4gICAgbm9JbXBsaWNpdEFueTogdHJ1ZSxcbiAgICB0YXJnZXQ6IHBsdWdpbnMudHMuU2NyaXB0VGFyZ2V0LkVTNSxcbiAgICBtb2R1bGU6IHBsdWdpbnMudHMuTW9kdWxlS2luZC5Db21tb25KU1xufVxuXG5leHBvcnQgbGV0IGNvbXBpbGUgPSAoZmlsZXNBcmc6c3RyaW5nW10pID0+IHtcbiAgICBjb21waWxlcihmaWxlc0FyZyxjb21waWxlT3B0aW9ucyk7XG59Il19
