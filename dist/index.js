"use strict";
// import all the stuff we need
var plugins = require("./tsn.plugins");
var compiler = function (fileNames, options) {
    var done = plugins.q.defer();
    var program = plugins.ts.createProgram(fileNames, options);
    var emitResult = program.emit();
    var allDiagnostics = plugins.ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
    allDiagnostics.forEach(function (diagnostic) {
        var _a = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start), line = _a.line, character = _a.character;
        var message = plugins.ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
        console.log(diagnostic.file.fileName + " (" + (line + 1) + "," + (character + 1) + "): " + message);
    });
    var exitCode = emitResult.emitSkipped ? 1 : 0;
    if (exitCode == 0) {
        plugins.beautylog.ok("TypeScript emit succeeded!");
        done.resolve();
    }
    else {
        plugins.beautylog.error("TypeScript emit failed. Please investigate!");
        process.exit(exitCode);
    }
    return done.promise;
};
var compilerOptions = {
    declaration: true,
    inlineSourceMap: true,
    noEmitOnError: true,
    noImplicitAny: true,
    target: plugins.ts.ScriptTarget.ES5,
    module: plugins.ts.ModuleKind.CommonJS
};
exports.compile = function (filesArg, outDirArg) {
    var assignedOptions = {};
    assignedOptions = plugins.lodash.assign(assignedOptions, compiler, { outDir: outDirArg }); // create final options
    plugins.beautylog.info("checking files before compilation");
    return compiler(filesArg, assignedOptions); // return the promise from compiler(); 
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBK0I7QUFDL0IsSUFBWSxPQUFPLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFFekMsSUFBSSxRQUFRLEdBQUcsVUFBQyxTQUFtQixFQUFFLE9BQW1DO0lBQ3BFLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUVoQyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFOUYsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQVU7UUFDOUIsSUFBQSxvRUFBeUYsRUFBbkYsY0FBSSxFQUFFLHdCQUFTLENBQXFFO1FBQzFGLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsNEJBQTRCLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRixPQUFPLENBQUMsR0FBRyxDQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxXQUFLLElBQUksR0FBRyxDQUFDLFdBQUksU0FBUyxHQUFHLENBQUMsWUFBTSxPQUFTLENBQUMsQ0FBQztJQUMxRixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUEsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBQztRQUNkLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDdkUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDeEIsQ0FBQyxDQUFBO0FBRUQsSUFBSSxlQUFlLEdBQThCO0lBQzdDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLGFBQWEsRUFBRSxJQUFJO0lBQ25CLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHO0lBQ25DLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRO0NBQ3pDLENBQUM7QUFFUyxlQUFPLEdBQUcsVUFBQyxRQUFpQixFQUFDLFNBQWdCO0lBQ3BELElBQUksZUFBZSxHQUE4QixFQUFFLENBQUM7SUFDcEQsZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBQyxRQUFRLEVBQUMsRUFBQyxNQUFNLEVBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QjtJQUM3RyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsdUNBQXVDO0FBQ3RGLENBQUMsQ0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBhbGwgdGhlIHN0dWZmIHdlIG5lZWRcbmltcG9ydCAqIGFzIHBsdWdpbnMgZnJvbSBcIi4vdHNuLnBsdWdpbnNcIjtcblxubGV0IGNvbXBpbGVyID0gKGZpbGVOYW1lczogc3RyaW5nW10sIG9wdGlvbnM6IHBsdWdpbnMudHMuQ29tcGlsZXJPcHRpb25zKTogdm9pZCA9PiB7XG4gICAgbGV0IGRvbmUgPSBwbHVnaW5zLnEuZGVmZXIoKTtcbiAgICBsZXQgcHJvZ3JhbSA9IHBsdWdpbnMudHMuY3JlYXRlUHJvZ3JhbShmaWxlTmFtZXMsIG9wdGlvbnMpO1xuICAgIGxldCBlbWl0UmVzdWx0ID0gcHJvZ3JhbS5lbWl0KCk7XG5cbiAgICBsZXQgYWxsRGlhZ25vc3RpY3MgPSBwbHVnaW5zLnRzLmdldFByZUVtaXREaWFnbm9zdGljcyhwcm9ncmFtKS5jb25jYXQoZW1pdFJlc3VsdC5kaWFnbm9zdGljcyk7XG5cbiAgICBhbGxEaWFnbm9zdGljcy5mb3JFYWNoKChkaWFnbm9zdGljKSA9PiB7XG4gICAgICAgIGxldCB7IGxpbmUsIGNoYXJhY3RlciB9ID0gZGlhZ25vc3RpYy5maWxlLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKGRpYWdub3N0aWMuc3RhcnQpO1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHBsdWdpbnMudHMuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dChkaWFnbm9zdGljLm1lc3NhZ2VUZXh0LCAnXFxuJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke2RpYWdub3N0aWMuZmlsZS5maWxlTmFtZX0gKCR7bGluZSArIDF9LCR7Y2hhcmFjdGVyICsgMX0pOiAke21lc3NhZ2V9YCk7XG4gICAgfSk7XG5cbiAgICBsZXQgZXhpdENvZGUgPSBlbWl0UmVzdWx0LmVtaXRTa2lwcGVkID8gMSA6IDA7XG4gICAgaWYoZXhpdENvZGUgPT0gMCl7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLm9rKFwiVHlwZVNjcmlwdCBlbWl0IHN1Y2NlZWRlZCFcIik7XG4gICAgICAgIGRvbmUucmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmVycm9yKFwiVHlwZVNjcmlwdCBlbWl0IGZhaWxlZC4gUGxlYXNlIGludmVzdGlnYXRlIVwiKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KGV4aXRDb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbn1cblxubGV0IGNvbXBpbGVyT3B0aW9uczpwbHVnaW5zLnRzLkNvbXBpbGVyT3B0aW9ucyA9IHtcbiAgICBkZWNsYXJhdGlvbjogdHJ1ZSxcbiAgICBpbmxpbmVTb3VyY2VNYXA6IHRydWUsXG4gICAgbm9FbWl0T25FcnJvcjogdHJ1ZSxcbiAgICBub0ltcGxpY2l0QW55OiB0cnVlLFxuICAgIHRhcmdldDogcGx1Z2lucy50cy5TY3JpcHRUYXJnZXQuRVM1LFxuICAgIG1vZHVsZTogcGx1Z2lucy50cy5Nb2R1bGVLaW5kLkNvbW1vbkpTXG59O1xuXG5leHBvcnQgbGV0IGNvbXBpbGUgPSAoZmlsZXNBcmc6c3RyaW5nW10sb3V0RGlyQXJnOnN0cmluZykgPT4ge1xuICAgIGxldCBhc3NpZ25lZE9wdGlvbnM6cGx1Z2lucy50cy5Db21waWxlck9wdGlvbnMgPSB7fTtcbiAgICBhc3NpZ25lZE9wdGlvbnMgPSBwbHVnaW5zLmxvZGFzaC5hc3NpZ24oYXNzaWduZWRPcHRpb25zLGNvbXBpbGVyLHtvdXREaXI6b3V0RGlyQXJnfSk7IC8vIGNyZWF0ZSBmaW5hbCBvcHRpb25zXG4gICAgcGx1Z2lucy5iZWF1dHlsb2cuaW5mbyhcImNoZWNraW5nIGZpbGVzIGJlZm9yZSBjb21waWxhdGlvblwiKTtcbiAgICByZXR1cm4gY29tcGlsZXIoZmlsZXNBcmcsYXNzaWduZWRPcHRpb25zKTsgLy8gcmV0dXJuIHRoZSBwcm9taXNlIGZyb20gY29tcGlsZXIoKTsgXG59Il19
